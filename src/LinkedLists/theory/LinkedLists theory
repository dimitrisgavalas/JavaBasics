java will actually allocate four bytes of memory, for each integer.
Because it needs up to that amount to be able to store the highest value integer,

When  in a LL nothing is referring to an object Java will automatically destroy
during its garbage collection

ArrayList vs. LinkedList
The LinkedList class is a collection which can contain many objects of the same type,
just like the ArrayList.

The LinkedList class has all of the same methods as the ArrayList class because they
both implement the List interface. This means that you can add items, change items, remove items and clear the list in the same way.

However, while the ArrayList class and the LinkedList class can be used in the same way,
they are built very differently.

How the ArrayList works
The ArrayList class has a regular array inside it. When an element is added, it is placed
 into the array. If the array is not big enough, a new, larger array is created to replace
  the old one and the old one is removed.

How the LinkedList works
The LinkedList stores its items in "containers." The list has a link to the first
container and each container has a link to the next container in the list. To add
an element to the list, the element is placed into a new container and that container
is linked to one of the other containers in the list.

When To Use
Use an ArrayList for storing and accessing data, and LinkedList to manipulate data.


LinkedList Methods
For many cases, the ArrayList is more efficient as it is common to need access to random items in the list, but the LinkedList provides several methods to do certain operations more efficiently:

Method	Description	Try it
addFirst()	Adds an item to the beginning of the list.
addLast()	Add an item to the end of the list
removeFirst()	Remove an item from the beginning of the list.
removeLast()	Remove an item from the end of the list
getFirst()	Get the item at the beginning of the list
getLast()	Get the item at the end of the list











Java Iterator
An Iterator is an object that can be used to loop through collections,
 like ArrayList and HashSet. It is called an "iterator" because "iterating"
 is the technical term for looping.

To use an Iterator, you must import it from the java.util package.

Getting an Iterator
The iterator() method can be used to get an Iterator for any collection:

ExampleGet your own Java Server
// Import the ArrayList class and the Iterator class
import java.util.ArrayList;
import java.util.Iterator;

public class Main {
  public static void main(String[] args) {

    // Make a collection
    ArrayList<String> cars = new ArrayList<String>();
    cars.add("Volvo");
    cars.add("BMW");
    cars.add("Ford");
    cars.add("Mazda");

    // Get the iterator
    Iterator<String> it = cars.iterator();

    // Print the first item
    System.out.println(it.next());
  }
}



Looping Through a Collection
To loop through a collection, use the hasNext() and next() methods of the Iterator:

ExampleGet your own Java Server
while(it.hasNext()) {
  System.out.println(it.next());
 }


 Removing Items from a Collection
 Iterators are designed to easily change the collections that they loop through. The remove() method can remove items from a collection while looping.

 ExampleGet your own Java Server
 Use an iterator to remove numbers less than 10 from a collection:

 import java.util.ArrayList;
 import java.util.Iterator;

 public class Main {
   public static void main(String[] args) {
     ArrayList<Integer> numbers = new ArrayList<Integer>();
     numbers.add(12);
     numbers.add(8);
     numbers.add(2);
     numbers.add(23);
     Iterator<Integer> it = numbers.iterator();
     while(it.hasNext()) {
       Integer i = it.next();
       if(i < 10) {
         it.remove();
       }
     }
     System.out.println(numbers);
   }
 }